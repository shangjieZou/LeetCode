class stockI_Solution():
    def maxProfit(self, prices):
        if prices == []:
            max_profit=0
        else:
            min_price = prices[0]
            max_profit = 0
            for i in range(len(prices)):
                if prices[i] < min_price:
                    min_price = prices[i]
                elif prices[i] - min_price > max_profit:
                    max_profit = prices[i] - min_price
            return max_profit


# leetcode打家劫舍
class rob_Solution:
    def rob(self, nums):
        if nums != []:
            pre_max = 0
            current_max = nums[0]
            for i in range(len(nums)):
                if i+1 < len(nums):
                    temp = current_max
                    current_max = max(pre_max+nums[i+1], current_max)
                    pre_max = temp
        else:
            current_max = 0
        return current_max

if __name__ == '__main__':
    if(0):
        prices = [9,6,5,3,1]
        max_profit = stockI_Solution()
        print(max_profit.maxProfit(prices))
        

# Edit Distance
def edit_distance(word1, word2):
    len1 = len(word1);
    len2 = len(word2);
    dp = np.zeros((len1 + 1,len2 + 1))
    for i in range(len1 + 1):
        dp[i][0] = i;     
    for j in range(len2 + 1):
        dp[0][j] = j;
     
    for i in range(1, len1 + 1):
        for j in range(1, len2 + 1):
            delta = 0 if word1[i-1] == word2[j-1] else 1
            dp[i][j] = min(dp[i - 1][j - 1] + delta, min(dp[i-1][j] + 1, dp[i][j - 1] + 1))
    return dp[len1][len2]
--------------------- 
作者：koibiki 
来源：CSDN 
原文：https://blog.csdn.net/koibiki/article/details/83031788 
版权声明：本文为博主原创文章，转载请附上博文链接！
